
.. currentmodule:: centidb.encoders


Encoders
########


Encoder Interface
+++++++++++++++++

.. autoclass:: Encoder


centidb.KEY_ENCODER
+++++++++++++++++++

This predefined Encoder uses :py:func:`centidb.keylib.packs` and
:py:func:`centidb.keylib.unpacks` to serialize tuples. It is used internally
to represent keys, counters, and :py:class:`Store <centidb.Store>` metadata.


centidb.PICKLE_ENCODER
++++++++++++++++++++++

This predefined Encoder uses :py:func:`pickle.dumps` and
:py:func:`pickle.loads` with protocol 2 to serialize any pickleable object. It
is the default encoder if no specific `encoder=` argument is given to the
:py:class:`Collection <centidb.Collection>` constructor.


centidb.PLAIN_PACKER
+++++++++++++++++++++

This predefined Encoder performs no work; the input is returned unchanged. It
is used as the default :py:class:`Collection(..., packer=)
<centidb.Collection>` argument when no other packer is provided.


centidb.ZLIB_PACKER
+++++++++++++++++++

This predefined Encoder uses :py:func:`zlib.compress` and
:py:func:`zlib.decompress` to provide value compression. It may be passed as
the `packer=` argument to :py:meth:`Collection.put <centidb.Collection.put>`,
or specified as the default using the `packer=` argument to the
:py:class:`Collection <centidb.Collection>` constructor.


make_json_encoder
+++++++++++++++++

.. autofunction:: centidb.encoders.make_json_encoder


make_msgpack_encoder
++++++++++++++++++++

.. autofunction:: centidb.encoders.make_msgpack_encoder


make_thrift_encoder
+++++++++++++++++++

.. autofunction:: centidb.encoders.make_thrift_encoder


Example
-------

Create a ``myproject.thrift`` file:

::

    struct Person {
        1: string username,
        2: string city,
        3: i32 age
    }

Now define a collection:

::

    # 'myproject' package is generated by 'thrift --genpy myproject.thrift'
    from myproject.ttypes import Person
    from centidb.support import make_thrift_encoder

    coll = centidb.Collection(store, 'people',
        encoder=make_thrift_encoder(Person))
    coll.add_index('username', lambda person: person.username)
    coll.add_index('age_city', lambda person: (person.age, person.city))

    user = Person(username=u'David', age=42, city='Trantor')
    coll.put(user)

    assert coll.indices['username'].get(u'David') == user

    # Minimal overhead:
    packed = coll.encoder.pack(Person(username='dave'))
    assert packed == '\x18\x04dave\x00'



Key Functions
+++++++++++++

These functions are based on `SQLite 4's key encoding
<http://sqlite.org/src4/doc/trunk/www/key_encoding.wiki>`_, except that:

* Support for ``uuid.UUID`` is added.
* Floats are removed.
* Varints are used for integers.

.. currentmodule:: centidb.keylib

.. function:: pack (prefix, tups)

    Alias for :py:func:`packs`

.. autofunction:: packs

.. function:: unpack

    Alias for :py:func:`unpacks` with `first=True`.

.. autofunction:: unpacks
.. autofunction:: invert
