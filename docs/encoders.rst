
.. currentmodule:: centidb.encoders


Encoders
########

.. autoclass:: Encoder


Predefined Encoders
+++++++++++++++++++

The ``centidb`` module contains the following predefined :py:class:`Encoder`
instances.

    ``KEY_ENCODER``
        Uses :py:func:`keycoder.packs` and
        :py:func:`keycoder.unpacks` to serialize tuples. It is used
        internally to represent keys, counters, and :py:class:`Store` metadata.

    ``PICKLE_ENCODER``
        Uses :py:func:`pickle.dumps` and :py:func:`pickle.loads` with protocol
        2 to serialize any pickleable object. It is the default encoder if no
        specific `encoder=` argument is given to the :py:class:`Collection`
        constructor.

**Compressors**

These are just :py:class:`Encoder` instances with the convention that their
names end in ``_PACKER``.

    ``PLAIN_PACKER``
        Performs no compression; the input is returned unchanged. This is the
        default packer.

    ``ZLIB_PACKER``
        Uses :py:func:`zlib.compress` and :py:func:`zlib.decompress` to provide
        value compression. It may be passed as the `packer=` argument to
        :py:meth:`Collection.put`, or specified as the default using the
        `packer=` argument to the :py:class:`Collection` constructor.


Thrift Integration
++++++++++++++++++

.. autofunction:: centidb.encoders.make_thrift_encoder


Example
-------

Create a ``myproject.thrift`` file:

::

    struct Person {
        1: string username,
        2: string city,
        3: i32 age
    }

Now define a collection:

::

    # 'myproject' package is generated by 'thrift --genpy myproject.thrift'
    from myproject.ttypes import Person
    from centidb.support import make_thrift_encoder

    coll = centidb.Collection(store, 'people',
        encoder=make_thrift_encoder(Person))
    coll.add_index('username', lambda person: person.username)
    coll.add_index('age_city', lambda person: (person.age, person.city))

    user = Person(username=u'David', age=42, city='Trantor')
    coll.put(user)

    assert coll.indices['username'].get(u'David') == user

    # Minimal overhead:
    packed = coll.encoder.pack(Person(username='dave'))
    assert packed == '\x18\x04dave\x00'


Other Encoders
++++++++++++++

The `centidb.support` module includes helpers for a few more encodings.

.. autofunction:: centidb.encoders.make_json_encoder
.. autofunction:: centidb.encoders.make_msgpack_encoder

