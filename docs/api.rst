
.. currentmodule:: centidb

Reference
#########


open
++++

.. autofunction:: centidb.open


Store Class
+++++++++++

.. autoclass:: Store
    :members:

Collection Class
++++++++++++++++

.. autoclass:: Collection
    :members:

Record Class
++++++++++++

.. autoclass:: Record
    :members:

Index Class
+++++++++++

.. autoclass:: Index
    :members:


Engines
#######

Engine Interface
++++++++++++++++

A storage engine or transaction is any object that implements the following
methods. All key and value variables below are ``NUL``-safe bytestrings:

    `get(key)`:
        Return the value of `key` or ``None`` if it does not exist.

    `put(key, value)`:
        Set the value of `key` to `value`, overwriting any prior value.

    `delete(key)`:
        Delete `key` if it exists.

    `iter(key, reverse=False)`:
        Yield `(key, value)` tuples in key order, starting at `key` and moving
        in a fixed direction.

        Key order must match the C `memcmp()
        <http://linux.die.net/man/3/memcmp>`_ function.

        `key`:
            Starting key. The first yielded element should correspond to this
            key if it exists, or the next highest key, or the highest key in
            the store.

        `reverse`:
            If ``False``, iteration proceeds until the lexicographically
            highest key is reached, otherwise it proceeds until the lowest key
            is reached.

    **txn_id** *= None*
        Name for the transaction represented by the object; may be any Python
        value. Omit the attribute for engines or "transaction objects" that do
        not support transactions. If your engine supports transactions but
        cannot provide an ID, simply set it to :py:func:`time.time`.


Predefined Engines
++++++++++++++++++

.. autoclass:: centidb.support.ListEngine
    :members:

.. autoclass:: centidb.support.SkiplistEngine
    :members:

.. autoclass:: centidb.support.LmdbEngine
    :members:

.. autoclass:: centidb.support.PlyvelEngine
    :members:

.. autoclass:: centidb.support.KyotoEngine
    :members:


Encodings
#########

.. autoclass:: Encoder


Predefined Encoders
+++++++++++++++++++

The ``centidb`` module contains the following predefined :py:class:`Encoder`
instances.

    ``KEY_ENCODER``
        Uses :py:func:`keycoder.packs` and
        :py:func:`keycoder.unpacks` to serialize tuples. It is used
        internally to represent keys, counters, and :py:class:`Store` metadata.

    ``PICKLE_ENCODER``
        Uses :py:func:`pickle.dumps` and :py:func:`pickle.loads` with protocol
        2 to serialize any pickleable object. It is the default encoder if no
        specific `encoder=` argument is given to the :py:class:`Collection`
        constructor.

**Compressors**

These are just :py:class:`Encoder` instances with the convention that their
names end in ``_PACKER``.

    ``PLAIN_PACKER``
        Performs no compression; the input is returned unchanged. This is the
        default packer.

    ``ZLIB_PACKER``
        Uses :py:func:`zlib.compress` and :py:func:`zlib.decompress` to provide
        value compression. It may be passed as the `packer=` argument to
        :py:meth:`Collection.put`, or specified as the default using the
        `packer=` argument to the :py:class:`Collection` constructor.


Thrift Integration
++++++++++++++++++

.. autofunction:: centidb.support.make_thrift_encoder


Example
-------

Create a ``myproject.thrift`` file:

::

    struct Person {
        1: string username,
        2: string city,
        3: i32 age
    }

Now define a collection:

::

    # 'myproject' package is generated by 'thrift --genpy myproject.thrift'
    from myproject.ttypes import Person
    from centidb.support import make_thrift_encoder

    coll = centidb.Collection(store, 'people',
        encoder=make_thrift_encoder(Person))
    coll.add_index('username', lambda person: person.username)
    coll.add_index('age_city', lambda person: (person.age, person.city))

    user = Person(username=u'David', age=42, city='Trantor')
    coll.put(user)

    assert coll.indices['username'].get(u'David') == user

    # Minimal overhead:
    packed = coll.encoder.pack(Person(username='dave'))
    assert packed == '\x18\x04dave\x00'


Other Encoders
++++++++++++++

The `centidb.support` module includes helpers for a few more encodings.

.. autofunction:: centidb.support.make_json_encoder
.. autofunction:: centidb.support.make_msgpack_encoder

